python pig_game.py --player1 human --player2 ccomputer


python pig_game.py --player1 ccomputer --player2 computer


python pig_game.py --player1 computer --player2 computer --timed

import random
import time
import argparse


class player:
    
    def __init__(self, name):
        self.name = name
        self.score = 0

    def take_turn(self, game):
        pass


class HumanPlayer(Player):
   
    def take_turn(self, game):
        turn_total = 0
        print(f"\n{self.name}'s turn. Current score: {self.score}")

        while True:
            print(f"Turn total so far: {turn_total}")
            choice = input("Type 'r' to roll or 'h' to hold: ").lower()

            if choice == 'h':
                self.score += turn_total
                print(f"{self.name} holds. New total score: {self.score}")
                break

            roll = game.roll_dice()
            print(f"{self.name} rolled a {roll}")

            if roll == 1:
                print("Oops! Rolled a 1. No points this turn.")
                break
            else:
                turn_total += roll

            if self.score + turn_total >= game.winning_score:
                self.score += turn_total
                print(f"{self.name} reached {self.score} points and wins!")
                break


class ComputerPlayer(Player):
    
    def take_turn(self, game):
        turn_total = 0
        limit = min(25, game.winning_score - self.score)
        print(f"\n{self.name}'s turn (Computer). Current score: {self.score}")

        while True:
            if turn_total >= limit:
                print(f"{self.name} decides to hold at {turn_total} points.")
                self.score += turn_total
                break

            roll = game.roll_dice()
            print(f"{self.name} rolled a {roll}")

            if roll == 1:
                print(f"{self.name} rolled a 1 and lost the turn.")
                break
            else:
                turn_total += roll

            if self.score + turn_total >= game.winning_score:
                self.score += turn_total
                print(f"{self.name} reached {self.score} points and wins!")
                break




class PlayerFactory:

    def create_player(player_type, name):
        if player_type == "human":
            return HumanPlayer(name)
        elif player_type == "computer":
            return ComputerPlayer(name)
        else:
            raise ValueError("Player type must be 'human' or 'computer'.")



class Game:
   
    def __init__(self, p1_type, p2_type, winning_score=100):
        self.winning_score = winning_score
        self.player1 = PlayerFactory.create_player(p1_type, "Player 1")
        self.player2 = PlayerFactory.create_player(p2_type, "Player 2")
        self.players = [self.player1, self.player2]
        self.current_player = 0

    def roll_dice(self):
        return random.randint(1, 6)

    def switch_player(self):
        self.current_player = 1 - self.current_player

    def play(self):
        print("Starting a new game of Pig!")
        while True:
            player = self.players[self.current_player]
            player.take_turn(self)

            if player.score >= self.winning_score:
                print(f"\n🏆 {player.name} wins with {player.score} points! 🏆")
                break

            self.switch_player()


class TimedGameProxy:
    
    def __init__(self, game, time_limit=60):
        self.game = game
        self.time_limit = time_limit

    def play(self):
        start = time.time()
        print("\nTimed game started! You have 1 minute to win!")

        while True:
            if time.time() - start > self.time_limit:
                print("\n Time is up!")
                break

            player = self.game.players[self.game.current_player]
            player.take_turn(self.game)

            if player.score >= self.game.winning_score:
                print(f"\n {player.name} wins with {player.score} points! ")
                return

            if time.time() - start > self.time_limit:
                print("\n Time is up!")
                break

            self.game.switch_player()

       
        scores = [(p.name, p.score) for p in self.game.players]
        scores.sort(key=lambda x: x[1], reverse=True)
        print(f"Winner by time: {scores[0][0]} with {scores[0][1]} points.")



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--player1", default="human", choices=["human", "computer"])
    parser.add_argument("--player2", default="computer", choices=["human", "computer"])
    parser.add_argument("--timed", action="store_true")
    args = parser.parse_args()

    game = Game(args.player1, args.player2)

    if args.timed:
        timed_game = TimedGameProxy(game)
        timed_game.play()
    else:
        game.play()


if __name__ == "__main__":
    main()

